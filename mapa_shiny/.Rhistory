library(shiny); runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
data1 <- read.csv("../data_sets/Alcaldias_data_set.csv")
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Numero de casos", min(data1$casos_totales), max(data1$casos_totales),
value = range(data1$casos_totales), step = 0.1
),
selectInput("colors", "Color del esquema",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
checkboxInput("legend", "Rangos IDH", TRUE),
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
data1[data1$casos_totales>= input$range[1] & data1$casos_totales <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
#(input$colors,data$TOP )
colorQuantile(input$colors, data1$casos_totales)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(data1) %>% addTiles() %>%
fitBounds(~min(longitude), ~min(latitude), ~max(longitude), ~max(latitude))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~sqrt(100)*30, stroke = FALSE,
fillColor = ~pal(casos_totales),fillOpacity = 0.8,popup = ~paste(alcaldia,casos_totales,"Casos presentados",sep=": ")
)%>%
setView(lng=-99.12766, lat=19.42847 , zoom=10)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = data1)
#IDH <- data[ ,input$Total_Casos]
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~data1$casos_totales
)
}
})
gc()
memory.size(max=F)
}
shinyApp(ui, server)
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
library(shiny); runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
data1 <- read.csv("../data_sets/Alcaldias_data_set.csv")
data2 <- read.csv("../data_sets/Estaciones_metro.csv")
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Numero de casos", min(data1$casos_totales), max(data1$casos_totales),
value = range(data1$casos_totales), step = 0.1
),
selectInput("colors", "Color del esquema",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
checkboxInput("legend", "Rangos IDH", TRUE),
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
data1[data1$casos_totales>= input$range[1] & data1$casos_totales <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
#(input$colors,data$TOP )
colorQuantile(input$colors, data1$casos_totales)
})
colorpal_metro <- colorFactor(palette = c('#FF33F0'), domain = data2$estacion)
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(data1) %>% addTiles() %>%
fitBounds(~min(longitude), ~min(latitude), ~max(longitude), ~max(latitude))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
pal_1 <- colorpal_metro()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~sqrt(100)*30, stroke = FALSE,
fillColor = ~pal(casos_totales),fillOpacity = 0.8,popup = ~paste(colonia,casos_totales,"Casos presentados",sep=": ")
)%>%
setView(lng=-99.12766, lat=19.42847 , zoom=10)%>%
addCircleMarkers(
radius = ~~sqrt(1000)*30,
color = ~pal_1(estacion),
stroke = FALSE,
fillOpacity = 0.5
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map1", data = data1)
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~data1$casos_totales
)
}
})
gc()
memory.size(max=F)
}
shinyApp(ui, server)
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
runApp('mapa_CDMX.R')
library(shiny); runApp('mapa_CDMX.R')
library(shiny); runApp('mapa_CDMX.R')
